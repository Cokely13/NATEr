generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Category {
  Coding
  Study
  Work
  Reading
  Exercise
  Music
  Cleaning
  Stretching
  Walk
  Other
}

enum Frequency {
  Daily
  Weekly
  OneTime
}

enum AccessLevel {
  read
  edit
}

enum GoalVisibility {
  private
  topFriends
  allFriends
}

enum FriendStatus {
  pending
  accepted
  denied
}

enum FriendTier {
  basic
  top
}

enum UserShare {
  none
  friends
}

export type SharedWith = {
  id: number;
  userId: number;
  access: "read" | "edit";
  user: {
    id: number;
    name: string;
  };
};

model User {
  id        Int     @id @default(autoincrement())
  name      String
  email     String? @unique
  password  String
  requestedFriends Friend[] @relation("RequestingUser")
  receivedFriends  Friend[] @relation("ReceivingUser")
  goals     Goal[]
  progress  GoalProgress[]
  shareLevel   UserShare @default(friends)
  sharedWith    SharedGoal[] // Friends it's shared with
}

model Goal {
  id              Int      @id @default(autoincrement())
  category        Category
  description     String?
  targetMinutes   Int
  frequency       Frequency
  date            DateTime?
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
  progressEntries GoalProgress[]
    currentCompletedStreak Int      @default(0)
  currentMissedStreak    Int      @default(0)
  longestCompletedStreak Int      @default(0)
  longestMissedStreak    Int      @default(0)
   visibility    GoalVisibility  @default(private)
  sharedWith    SharedGoal[]
}

model GoalProgress {
  id               Int      @id @default(autoincrement())
  goalId           Int
  userId           Int
  date             DateTime
  minutesCompleted Int
  completed        Boolean  @default(false)
  targetMinutes    Int
  quality      Int?
  note         String?
  goal             Goal     @relation(fields: [goalId], references: [id])
  user             User     @relation(fields: [userId], references: [id])
  @@unique([goalId, userId, date])
}

model Friend {
  id           Int          @id @default(autoincrement())
  requester    User         @relation("RequestingUser", fields: [requesterId], references: [id])
  requesterId  Int
  recipient    User         @relation("ReceivingUser", fields: [recipientId], references: [id])
  recipientId  Int
  status       FriendStatus @default(pending)
  tier         FriendTier   @default(basic)
  createdAt    DateTime     @default(now())
}


model SharedGoal {
  id        Int          @id @default(autoincrement())
  goalId    Int
  goal      Goal         @relation(fields: [goalId], references: [id])
  userId    Int
  user      User         @relation(fields: [userId], references: [id])
  access    AccessLevel  @default(read)
}
